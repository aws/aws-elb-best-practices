{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Elastic Load Balancing (ELB) best practices guides. The aim of this project is to offer prescriptive guidance for utilizing ELB in the AWS Cloud. The content in the guides is a collection of best practices aligned with the AWS Well-Architected Framework and other sources such as the AWS documentation, AWS Whitepapers, Amazon Builders' Library. As the ELB Team, we have incorporated insights gained from our direct experiences with customers. We also welcome suggestions from the community.</p> <p>We currently have published guides for the following topics:</p> <ul> <li>ELB Best Practices for Security<ul> <li>Data Protection</li> <li>Incident Response</li> <li>Infrastructure Protection</li> <li>Security Assurance</li> <li>Vulnerability Management</li> </ul> </li> <li>ELB Best Practices for Reliability<ul> <li>Failure Management</li> <li>Workload Architecture</li> </ul> </li> </ul> <p>We have plans to extend the guides to include a variety of topics such as Performance, Observability and Scaling.</p>"},{"location":"#about","title":"About","text":"<p>This guide was conceived by the ELB Customer Success team, inspired by the EKS Best Practices Guides.</p> <p>We chose to publish it on GitHub to allow for quicker iterations and, most importantly, to capture and incorporate feedback from the community.</p>"},{"location":"#related-guides","title":"Related guides","text":"<p>EKS Best Practices Guides</p> <p>AWS Observability Best Practices</p> <p>EMR Containers Best Practices Guides </p>"},{"location":"#contributing","title":"Contributing","text":"<p>We encourage you to contribute to these guides. If you have implemented a practice that has proven to be effective, please share it with us by opening an issue or a pull request. Similarly, if you discover an error or flaw in the guidance we've already published, please submit a PR to correct it.</p>"},{"location":"bookmarks/","title":"Bookmarks","text":"<p>List of ELB related content</p>"},{"location":"bookmarks/#best-practices","title":"Best Practices","text":"<ul> <li>ELB Best Practices Guides (this guide)</li> </ul>"},{"location":"bookmarks/#documentation","title":"Documentation","text":"<ul> <li> <p>User Guide for Application Load Balancers</p> </li> <li> <p>User Guide for Network Load Balancers</p> </li> <li> <p>User Guide for Gateway Load Balancers</p> </li> <li> <p>User Guide for Classic Load Balancers</p> </li> </ul>"},{"location":"bookmarks/#blog-posts","title":"Blog Posts","text":"<ul> <li> <p>Preserving client IP address with Proxy protocol v2 and Network Load Balancer</p> </li> <li> <p>Introducing dual-stack without public IPv4 Application Load Balancer</p> </li> <li> <p>Scaling strategies for Elastic Load Balancing</p> </li> <li> <p>Introducing mTLS for Application Load Balancer</p> </li> <li> <p>Application Load Balancer-type Target Group for Network Load Balancer</p> </li> <li> <p>Best practices for deploying Gateway Load Balancer</p> </li> <li> <p>Using AWS Lambda to enable static IP addresses for Application Load Balancers</p> </li> <li> <p>Centralized inspection architecture with AWS Gateway Load Balancer and AWS Transit Gateway</p> </li> <li> <p>Elastic Load Balancer: Maximizing Benefits and Keeping Costs Low</p> </li> <li> <p>Scaling NLB target groups by connections</p> </li> <li> <p>Improving availability with Application Load Balancer automatic target weights</p> </li> <li> <p>Deploying AWS Load Balancer Controller on Amazon EKS</p> </li> <li> <p>Identifying unhealthy targets of Elastic Load Balancer</p> </li> <li> <p>Introducing AWS Gateway Load Balancer: Supported architecture patterns</p> </li> <li> <p>Resolve DNS names of Network Load Balancer nodes to limit cross-Zone traffic</p> </li> <li> <p>Scaling network traffic inspection using AWS Gateway Load Balancer</p> </li> <li> <p>Configuring client IP address preservation with a Network Load Balancer in AWS Global Accelerator</p> </li> <li> <p>Hostname-as-Target for Network Load Balancers</p> </li> <li> <p>Introducing AWS Gateway Load Balancer Target Failover for Existing Flows</p> </li> <li> <p>Accessing private Application Load Balancers and EC2 instances through AWS Global Accelerator</p> </li> <li> <p>Choosing the right health check with Elastic Load Balancing and EC2 Auto Scaling</p> </li> <li> <p>Lambda functions as targets for Application Load Balancers</p> </li> <li> <p>Experian: Centralized internet ingress using AWS Gateway Load Balancer and AWS Transit Gateway</p> </li> <li> <p>Exploring Data Transfer Costs for Classic and Application Load Balancers</p> </li> <li> <p>Announcing Amazon Virtual Private Gateway Ingress Routing support for Gateway Load Balancer</p> </li> <li> <p>Integrate your custom logic or appliance with AWS Gateway Load Balancer</p> </li> <li> <p>Improving availability and performance for Application Load Balancers using one-click integration with AWS Global Accelerator</p> </li> <li> <p>Using load balancer target group health thresholds to improve availability</p> </li> <li> <p>Monitoring load balancers using Amazon CloudWatch anomaly detection alarms</p> </li> <li> <p>How to securely publish Internet applications at scale using Application Load Balancer and AWS PrivateLink</p> </li> <li> <p>How to integrate Linux instances with AWS Gateway Load Balancer</p> </li> <li> <p>Application Load Balancer Simplifies Deployment with Weighted Target Groups</p> </li> <li> <p>Implement a central ingress Application Load Balancer supporting private Amazon Elastic Kubernetes Service VPCs</p> </li> <li> <p>Configuring an Application Load Balancer on AWS Outposts</p> </li> <li> <p>Target Group Load Shedding for Application Load Balancer</p> </li> <li> <p>Building an Open Source IDS IPS service for Gateway Load Balancer</p> </li> <li> <p>Gateway Load Balancer support for IPv6</p> </li> <li> <p>Simplify Login with Application Load Balancer Built-in Authentication</p> </li> </ul>"},{"location":"bookmarks/#presentations","title":"Presentations","text":"<ul> <li> <p>AWS re:Invent 2023 - Enhance your app\u2019s security &amp; availability with Elastic Load Balancing</p> </li> <li> <p>AWS re:Inforce 2022 - How to use ELB to enhance your security posture at scale</p> </li> <li> <p>AWS re:Invent 2021 - How to choose the right load balancer for your AWS workloads</p> </li> <li> <p>AWS re:Invent 2020 - Elastic Load Balancing: A year of innovations </p> </li> <li> <p>AWS re:Invent 2020 - Choosing the right load balancer for serverless applications</p> </li> <li> <p>AWS re:Invent 2020 - Introducing Gateway Load Balancer for deploying &amp; running virtual appliances</p> </li> <li> <p>Getting Started with AWS Gateway Load Balancer</p> </li> <li> <p>AWS re:Invent 2019 - Get the most from Elastic Load Balancing for different workloads</p> </li> <li> <p>AWS re:Invent 2018 - Elastic Load Balancing: Deep Dive and Best Practices</p> </li> <li> <p>AWS re:Invent 2017 - Deep Dive into the New Network Load Balancer</p> </li> <li> <p>AWS re:Invent 2017 - Elastic Load Balancing Deep Dive and Best Practices</p> </li> <li> <p>AWS re:Invent 2016 - Elastic Load Balancing Deep Dive and Best Practices</p> </li> <li> <p>AWS re:Invent 2015 - Elastic Load Balancing Deep Dive and Best Practices</p> </li> <li> <p>AWS re:Invent 2014 - Elastic Load Balancing Deep Dive and Best Practices</p> </li> </ul>"},{"location":"bookmarks/#demos-tools-code-samples","title":"Demos / Tools / Code Samples","text":"<ul> <li> <p>Elastic Load Balancing Demo Site</p> </li> <li> <p>Elastic Load Balancing Tools</p> </li> <li> <p>Build a Website Login page with AWS ELB and AWS Cognito using Terraform CDK</p> </li> <li> <p>Elastic Load Balancer: Using hostname as a target</p> </li> <li> <p>AWS Code Sample for AWS Gateway Load Balancer</p> </li> <li> <p>Access Internal Application Load Balancer through AWS Global Accelerator</p> </li> <li> <p>Central Application Loadbalancer Ingress for private EKS VPCs Terraform</p> </li> <li> <p>Application Load Balancer Target Group Load Shedding</p> </li> <li> <p>Weighted Application Loadbalancer Infrastructure protected by WAF</p> </li> <li> <p>gRPC traffic on ALB to EKS</p> </li> </ul>"},{"location":"bookmarks/#workshops-labs","title":"Workshops / Labs","text":"<ul> <li>AWS Gateway Load Balancer Workshop</li> </ul>"},{"location":"checklist/","title":"Checklist","text":"<p>The section contains all best practices mentioned in the guide.</p>"},{"location":"checklist/#security","title":"Security","text":""},{"location":"checklist/#data-protection","title":"Data Protection","text":"<ul> <li> <p> [ALB, NLB] Use HTTPS / TLS listeners (more details)</p> </li> <li> <p> [ALB] Use HTTP to HTTPS redirection rule. (more details)</p> </li> <li> <p> [ALB, NLB] Use the most restrict security policy that is compatible with clients. (more details)</p> </li> <li> <p> [ALB, NLB] Use AWS Certificate Manager for TLS certificates. (more details)</p> </li> <li> <p> [ALB, NLB] For end-to-end encryption, use TLS/HTTPS on both the load balancer listener and target group. (more details)</p> </li> </ul>"},{"location":"checklist/#incident-response","title":"Incident Response","text":"<ul> <li> <p> [ALB, NLB] Enable access logs. (more details)</p> </li> <li> <p> [ALB, NLB] Consolidate access logs in the Log Archive account. (more details)</p> </li> <li> <p> [ALB, NLB] Use a tool to analyze access logs. (more details)</p> </li> <li> <p> [ALB, NLB] Monitor events using AWS Health. (more details)</p> </li> <li> <p> [ALB, NLB] Include contacting AWS in your security incident playbooks. (more details)</p> </li> </ul>"},{"location":"checklist/#infrastructure-protection","title":"Infrastructure Protection","text":"<ul> <li> <p> [ALB, NLB] For DDoS protection against sophisticated, frequent and large attacks enable AWS Shield Advanced. (more details)</p> </li> <li> <p> [ALB, NLB] For enhanced DDoS resilience, allow untracked flows in the security group. (more details)</p> </li> <li> <p> [ALB, NLB] For DDoS protection and mitigation, know the normal behaviour of your clients. (more details)</p> </li> <li> <p> [ALB, NLB] For DDoS mitigation, scale the targets to absorb the traffic. (more details)</p> </li> <li> <p> [ALB] For DDoS protection, use AWS WAF integrated with ALB for Application layer defense. (more details)</p> </li> <li> <p> [ALB] For DDoS protection, use AWS WAF rate-based rules. (more details)</p> </li> <li> <p> [ALB, NLB] For DDoS protection, leverage AWS Edge locations by integrating either CloudFront or Global Accelerator to your load balancer. (more details)</p> </li> <li> <p> [ALB] When using CloudFront, restrict users from directly accessing the Application Load Balancer. (more details)</p> </li> <li> <p> [ALB, NLB] When using CloudFront, lock down the load balancer security group to accept connections only from CloudFront. (more details)</p> </li> <li> <p> [ALB, NLB] Lock down the target security groups to receive traffic only from the load balancer. (more details)</p> </li> </ul>"},{"location":"checklist/#security-assurance","title":"Security Assurance","text":"<ul> <li> [ALB, NLB] Use automated security and compliance checks. (more details)</li> </ul>"},{"location":"checklist/#vulnerability-management","title":"Vulnerability Management","text":"<ul> <li> [ALB] Use Strictest mode for desync mitigation. (more details)</li> </ul>"},{"location":"checklist/#reliability","title":"Reliability","text":""},{"location":"checklist/#failure-management","title":"Failure Management","text":"<ul> <li> <p> [ALB, NLB] Configure deep health check, that include the application's dependencies.  (more details)</p> </li> <li> <p> [ALB, NLB] Configure your Health Check to match your availability goals. (more details)</p> </li> <li> <p> [ALB] Use the \"weighted random\" algorithm with anomaly mitigation enabled on your target groups.  (more details)</p> </li> <li> <p> [ALB, NLB] Implement fail-fast logic in the clients. (more details)</p> </li> <li> <p> [ALB, NLB] Implement retry with exponential back-off and jitter to avoid retry storm. (more details)</p> </li> <li> <p> [ALB, NLB] Make sure clients and local DNS servers respect DNS TTL (time to live) of 60 seconds, and do not cache DNS results longer than the TTL. (more details)</p> </li> <li> <p> [ALB, NLB] Configure clients to reconnect to other IP after a connection failure. (more details)</p> </li> <li> <p> [ALB, NLB] Use Amazon Route 53 Application Recovery Controller for zonal shift. (more details)</p> </li> </ul>"},{"location":"checklist/#workload-achitecture","title":"Workload Achitecture","text":"<ul> <li> <p> [ALB, NLB] Configure your load balancers to use at least two Availability Zones.  (more details)</p> </li> <li> <p> [ALB, NLB] All target groups should have targets registered in all Availability Zones configured in the load balancer. (more details)</p> </li> <li> <p> [ALB, NLB] Turn off cross-zone load balancing to achieve Availability Zone Independence (AZI). (more details)</p> </li> <li> <p> [ALB, NLB] For high availability needs, consider adopting the static stability pattern. (more details)</p> </li> <li> <p> [ALB, NLB] For multi-region deployments, consider using AWS Global Accelerator with your load balancer. (more details)</p> </li> <li> <p> [ALB, NLB] Avoid using a single load balancer for multiple workloads. (more details)</p> </li> </ul>"},{"location":"reliability/","title":"Home","text":"<p>This section provides best practices related to reliability and covers both Application Load Balancer (ALB) and Network Load Balancer (NLB).</p>"},{"location":"reliability/#how-to-use-this-guide","title":"How to use this guide","text":"<p>This guide is meant to provide generic best practices for architects, developers and engineers responsible for designing, deploying and operating a system that leverage Amazon Elastic Load Balancer (ELB) for traffic distribution.</p> <p>This guide covers two types of Elastic Load Balancing services: Application Load Balancer (ALB) and Network Load Balancer (NLB). Unless stated otherwise in a specific section, the best practice are applicable to both. We may sometimes use term 'ELB' (Elastic Load Balancing) to refer collectively to both ALB and NLB.</p> <p>Each topic presents a brief overview, followed by recommendations and best practices. Topics can be read in any order order   and it's essential to test and validate recommendations to ensure they align with your specific requirements.</p>"},{"location":"reliability/#reliability-overview","title":"Reliability Overview","text":"<p>Reliability is one of the pillares of the AWS Well-Architected Framework. To ensure reliability, a system must be resilient and designed to achieve its availability goals. This guide covers best practices for improved resilience against potential failures.</p> <p>As with Security, resilience is a shared responsibility between AWS and the customer. AWS is responsible for resilience at the load balancer level, while the customer is responsible for managing the targets. Customers are also responsible for configuring the load balancer and making design decisions to meet their availability goals.</p> <p>At a high-level, the Elastic Load Balancing system will scale up/out the load balancer when needed, and automatically remove and replace any faulty nodes. Elastic Load Balancers are typically deployed to multiple EC2 Availability Zones, and utilize DNS to fail away from an impaired Availability Zone. This is because each ELB IP address has a Route 53 health check, that monitors the health of the load balancer nodes in the DNS record of the load balancer. This means that, if a node or AZ fails, the IP(s) will be removed from DNS.</p> <p>References and Further Reading</p> <p>Reliability Pillar - AWS Well-Architected Framework</p> <p>Example implementations for availability goals</p> <p>Shared Responsibility Model</p>"},{"location":"reliability/#in-this-guide","title":"In this Guide","text":"<ul> <li>Failure Management</li> <li>Workload Architecture</li> </ul>"},{"location":"reliability/#feedback","title":"Feedback","text":"<p>This guide is being released on GitHub to collect direct feedback and suggestions from the broader AWS Cloud community. If you have a best practice that you feel we ought to include in the guide, please file an issue or submit a PR in the GitHub repository. We intend to update the guide periodically as new features are added to the service or when a new best practice evolves.</p>"},{"location":"reliability/failure_management/","title":"Failure Management","text":""},{"location":"reliability/failure_management/#health-checks","title":"Health Checks","text":""},{"location":"reliability/failure_management/#deep-health-checks","title":"Deep health checks","text":"<p>Configure your health check protocol to be more comprehensive than just a simple TCP check. While TCP checks can indicate basic connectivity, they often don't provide a holistic view of the service's health. Implementing deep health checks is recommended. Deep health checks are more detailed checks to make sure that each service in your system is running optimally. In contrast to shallow health checks (which might only verify that a server is running), deep health checks involve checking not only local components in the targets but also dependencies that are vital for your applications to work.</p> <p>Note that your application may not natively offer a HTTP/HTTPS service so you may have to create a small web service that (when called) is able to fully check the health of the service that is running and then respond appropriately to the health check.</p> <p>Best Practice</p> <p>[ALB, NLB] Configure deep health check, that include the application's dependencies. </p> <p></p> <p>Image: Deep health check configuration, checking dependencies and returning error if a connection to a dependency fails.</p> <p>Considerations</p> <ul> <li> <p>Deep health checks should include only critical dependencies vital for the service's operation. If a \"soft\" dependency, which is not essential, is included in these checks, it may inadvertently be treated as a critical one, potentially increasing the scope of the impact during failures. This article from the Amazon Builder's library details the associated risks and trade-offs.</p> </li> <li> <p>Deep health checks can become computationally expensive. Some factors such as the number of nodes, cross-zone configuration and health check frequency can increase the number of health check probes. To prevent the response to health checks become a burden for the system and its dependencies, consider creating a process that checks dependency and write a static file. The static file will then be updated by a single process but used by all health check attempts.</p> </li> </ul> <p>References and Further Information</p> <p>Choosing the right health check with Elastic Load Balancing and EC2 Auto Scaling</p> <p>Implementing health checks</p> <p>Workshop - Implement deep health checks</p> <p>AWS re:Invent 2023 - Enhance your app\u2019s security &amp; availability with Elastic Load Balancing</p>"},{"location":"reliability/failure_management/#health-check-interval-and-timeout","title":"Health Check interval and timeout","text":"<p>When configuring health check settings such as timeout, threshold, and interval, it's crucial to align your strategy with your availability goals. One key goal might be to quickly remove a failing target to maintain system integrity, while also being mindful of avoiding false positives. However, it's important to consider scenarios where the entire system is under heavy load and may struggle to respond to health check probes. Such situations can lead to a downward spiral problem, where overloaded targets are removed, inadvertently increasing the load on the remaining ones, potentially leading to their removal as well.</p> <p>There are two common strategies to address this:</p> <ol> <li>Brownout : This strategy allows targets to continue operating under heavy load, however with slower response times. Implementation involves setting longer intervals and timeouts for health checks.</li> <li>Blackout: This strategy prioritizes fail away and/or quickly terminate any failing resources. It is implemented by configuring shorter intervals and timeouts for health checks.</li> </ol> <p>Best Practice</p> <p>[ALB, NLB] Configure your Health Check to match your availability goals.</p> <p>References and Further Information</p> <p>AWS re:Invent 2023 - Enhance your app\u2019s security &amp; availability with Elastic Load Balancing</p> <p>AWS re:Invent 2019: Get the most from Elastic Load Balancing for different workloads</p> <p>NLB - Health check settings</p> <p>ALB - Health check settings</p>"},{"location":"reliability/failure_management/#automatic-target-weights","title":"Automatic Target Weights","text":"<p>Health checks are useful for detecting when a target is down. However, they can sometimes miss partial failures. Also, depending on the configured thresholds and intervals, health checks may take time to remove an unhealthy target. </p> <p>Automatic Target Weights (ATW) improves workload availability by detecting targets with high error rates (compared to other targets). ATW then reduces traffic sent to these anomalous targets. Once a target recovers, ATW gradually increases traffic back to original levels.</p> <p>To use ATW:</p> <ul> <li>Configure \"weighted random\" as the load balancing algorithm for your target groups. </li> <li>Turn on anomaly mitigation. </li> </ul> <p>Best Practice</p> <p>[ALB] Use the \"weighted random\" algorithm with anomaly mitigation enabled on your target groups. </p> <p>Note</p> <p>The \"weighted random\" algorithm does not support the \"Slow start\" mechanism that is available with the \"Round robin\" algorithm.</p> <p>References and Further Information</p> <p>AWS Documentation - Automatic Target Weights (ATW)</p> <p>Improving availability with Application Load Balancer automatic target weights</p> <p>Application Load Balancer increases application availability with Automatic Target Weights</p>"},{"location":"reliability/failure_management/#client-behavior","title":"Client behavior","text":"<p>When designing with high availability in mind, it's crucial to factor in client behavior. Clients interacting with an Network or Application Load Balancers. During periods of system overload or partial failure, these clients can exacerbate the issue by adding additional load to the system by competing for resources.</p> <p>In the following section, we focus on clients and how they can be configured to allow for predictable and controlled behavior.</p> <p></p> <p>High level overview of an example of client retry logic, details in the following sections.</p> <p>Note</p> <p>This best practice is based on scenarios where client behavior can be adjusted, often the case with SDK clients and Content Delivery Networks (CDNs). When clients are end-users utilizing web browsers, they are typically less susceptible to the issues mentioned in this section.</p> <p>References and Further Information</p> <p>Timeouts, retries, and backoff with jitter</p>"},{"location":"reliability/failure_management/#fail-fast","title":"Fail-fast","text":"<p>When setting up a client, you'll often have an estimate of the time required for a standard request to complete. Your load balancer's idle timeout needs to cater to the slowest expected request. However, if you can control the client timeout logic, it is recommended to fail fast, when you know the request is taking longer than expected. In other words, if your clients is performing a simple GET request that typically takes less than 1 second to be completed, the client should not wait for 60 seconds if the server is not responding. Failing fast allows the client to quickly switch to another load balancer IP, potentially rerouting to a different target and improving the request's chance of success. It's important to pair this technique with strategies like Retrying failed requests with exponential back-off and jitter, as failing fast might add extra strain to an already burdened system.</p> <p>Best Practice</p> <p>[ALB, NLB] Implement fail-fast logic in the clients.</p> <p>References and Further Information</p> <p>Set client timeouts</p> <p>Fail fast and limit queues</p>"},{"location":"reliability/failure_management/#retrying-failed-requests-with-exponential-back-off-and-jitter","title":"Retrying failed requests with exponential back-off and jitter","text":"<p>When clients experience connection or requests failures, retrying is a common response. While this is generally a good practice, it's important to note that simultaneous retries from multiple clients can lead to a phenomenon known as a \"retry storm\". This situation can overload the system, reducing the likelihood of successful connections and delaying service recovery.</p> <p>To implement retries effectively, consider the following guidelines:</p> <ul> <li>Use retries to handle partial and transient failures, understanding that they work best when failures are infrequent or short-lived.</li> <li>Apply backoff strategies, such as exponential backoff with limits on retry attempts, to avoid exacerbating failures caused by system overloads.</li> <li>Design APIs to be idempotent to ensure that retries do not have unintended side effects.</li> <li>Introduce jitter to retry mechanisms and periodic work to avoid synchronized retries and spikes in load, which helps in spreading out the demand on resources over time.</li> </ul> <p>It's crucial to carefully balance and coordinate timeouts, retries, backoff, and jitter to mitigate the risks associated with distributed system failures while maintaining system performance and availability.</p> <p>Best Practice</p> <p>[ALB, NLB] Implement retry with exponential back-off and jitter to avoid retry storm.</p> <p>References and Further Information</p> <p>Timeouts, retries, and backoff with jitter</p> <p>AWS re:Invent 2019: Get the most from Elastic Load Balancing for different workloads</p> <p>Exponential Backoff And Jitter</p> <p>Making retries safe with idempotent APIs</p> <p>Control and limit retry calls</p> <p>Retry with backoff pattern</p>"},{"location":"reliability/failure_management/#use-dns-to-deliver-traffic-to-load-balancers","title":"Use DNS to deliver traffic to load balancers","text":"<p>Clients use the Domain Name Service (DNS) to determine how to reach the load balancer for your application. DNS provides the IP address that the client connects to. The ELB service (which includes Classic Load Balancer, Application Load Balancer and Network Load Balancer) constantly monitors the health and status of each load balancer. When necessary it updates the load balancer DNS records to only include the IP addresses of healthy and properly scaled resources. For ALB and CLB there are various operations that can cause the IP address of the load balancer to change - therefore, clients should not use IP addresses. Instead, they should use DNS to resolve the IP addresses of available load balancers. Multiple IP addresses may be returned in a DNS response (depending on the load balancer nodes that are active and healthy) so clients should attempt to connect to a different IP should the first connection attempt fail. Finally, the DNS record Time to Live (TTL) for load balancers is 60 seconds. DNS TTL is the numeric value (in seconds) that DNS resolvers use to determine how long to cache a record before making another query to Route 53. It is important the clients honor that and perform lookups when the DNS record they previously retrieved has expired.</p> <p>Best Practice</p> <p>[ALB, NLB] Make sure clients and local DNS servers respect DNS TTL (time to live) of 60 seconds, and do not cache DNS results longer than the TTL.</p> <p>Best Practice</p> <p>[ALB, NLB] Configure clients to reconnect to other IP after a connection failure.</p> <p>Note</p> <p>NLB works with static IP addresses and it is an alternative for clients unable to operate based on DNS. However, we recommend using DNS for NLB when you can. This is because, in scenarios where targets in an availability zone are failing the Health Checks and cross-zone load balancing is turned off, the load balancer's DNS record is updated to exclude the IP addresses of the affected zone. As a result, adhering to DNS results can enhance the reliability and availability of connections to NLBs. This approach helps ensure that traffic is directed to healthy and operational zones, maintaining efficient load balancing.</p> <p>References and Further Information</p> <p>AWS re:Invent 2019: Get the most from Elastic Load Balancing for different workloads</p>"},{"location":"reliability/failure_management/#use-amazon-route-53-application-recovery-controller-for-zonal-shift","title":"Use Amazon Route 53 Application Recovery Controller for zonal shift","text":"<p>If you are experiencing issues in your AWS environment that are isolated to a single Availability Zone (AZ), it's often advisable to shift traffic away from that AZ. In an ideal setup, effective health checks would identify the system's unavailability in that AZ, triggering an automated failover in DNS. This process would result in the removal of the load balancer nodes in the impacted AZ from the DNS response. However,  particularly in cases of intermittent or gray failures, you may want to proactively ensure that an AZ is evacuated until specific readiness checks are passing. Amazon Route 53 Application Recovery Controller integrates with both Application and Network Load Balancers for zonal shift operations when necessary. This blog post covers in details how to build resilient applications using this feature.</p> <p>Best Practice</p> <p>[ALB, NLB] Use Amazon Route 53 Application Recovery Controller for zonal shift.</p> <p>References and Further Information</p> <p>Advanced Multi-AZ Resilience Patterns</p> <p>Amazon Route 53 Application Recovery Controller</p> <p>Building highly resilient applications using Amazon Route 53 Application Recovery Controller, Part 1: Single-Region stack</p> <p>Best practices for zonal shifts in Route 53 ARC</p> <p>AWS re:Invent 2023 - Using zonal autoshift to automatically recover from an AZ impairment</p>"},{"location":"reliability/workload_architecture/","title":"Workload Architecture","text":""},{"location":"reliability/workload_architecture/#use-multiple-availability-zones","title":"Use multiple Availability Zones","text":"<p>AWS always recommends that your workloads use two or more Availability Zones (AZs) for improved reliability. This is a best practice in the Reliability Pillar of the AWS Well-Architected Framework. Configuring your load balancers to use multiple Availability Zones (AZs) ensures that they can benefit from the isolation of partitions of AWS infrastructure.</p> <p>By setting up your load balancers to use multiple AZs, you enhance fault tolerance. If one Availability Zone becomes unavailable or has less healthy targets than the DNS failover threshold (default = 1), the load balancer performs a DNS failover to automatically route traffic to healthy targets in other Availability Zones. This ensures that your application remains accessible even in the event of an issue in one of the AZs.</p> <p>Best Practice</p> <p>[ALB, NLB] Configure your load balancers to use at least two Availability Zones. </p> <p>Equally important, all AZs in use by your ELB should have targets registered in them. This reduces the chance of impact during an AZ impairment.</p> <p>Best Practice</p> <p>[ALB, NLB] All target groups should have targets registered in all Availability Zones configured in the load balancer.</p> <p>References and Further Information</p> <p>Deploy the workload to multiple locations</p> <p>Regions and Availability Zones</p> <p>Using load balancer target group health thresholds to improve availability</p>"},{"location":"reliability/workload_architecture/#availability-zone-independence-azi","title":"Availability Zone Independence (AZI)","text":"<p>To improve the availability of your load balancer in scenarios where a specific Availability Zone (AZ) faces issues, it is important to shift traffic away from the impacted AZ. A successful zonal evacuation strategy requires Availability Zone Independence (AZI) which in turn requires cross-zone load balancing to be turned off.</p> <p>Best Practice</p> <p>[ALB, NLB] Turn off cross-zone load balancing to achieve Availability Zone Independence (AZI).</p> <p></p> <p>Considerations</p> <ul> <li> <p>Turning off cross-zone load balancing can lead to uneven traffic distribution at the target level. To prevent this, ensure you have a an equal number of targets in each Availability Zone.</p> </li> <li> <p>With cross-zone load balancing turned off, it's crucial to prepare for potential zonal evacuations by ensuring sufficient target capacity at the remaining AZ(s) to manage the traffic. This can be achieved using an Auto Scaling or a Static stability strategies. If you can't plan for enough capacity across all participating Availability Zones, the recommendation is that you keep cross-zone load balancing on.</p> </li> <li> <p>Alternatively, you could keep cross-zone load balancing turned on, opting to fail away from an AZ at the load balancer level. In this case, implementing a robust health check strategy is recommended to ensure that traffic isn't directed to unhealthy targets in the affected zone.</p> </li> </ul> <p>References and Further Information</p> <p>Availability Zone independence</p> <p>Cross-zone load balancing</p> <p>Elastic Load Balancing - Zonal Shift</p> <p>ALB - Cross-zone load balancing for target groups</p> <p>NLB - Cross-zone load balancing for target groups</p>"},{"location":"reliability/workload_architecture/#static-stability","title":"Static Stability","text":"<p>Static stability is a system's design pattern focused on the resilience of a system, more specifically ensuring a system's readiness to withstand a partial failure. For load balancers and Availability Zones (AZ), this entails having enough target capacity to handle impairments in any single AZ. Essentially, this involves over provisioning targets in each AZ reducing reliance on scaling activities to maintain availability during AZ disruptions. When deciding how much to over provision, think of having one availability zone worth of extra capacity at any time spread across all zones, so when a zonal shift happens, the remaining zones will be able to handle the load of the lost zone.</p> <p>Best Practice</p> <p>[ALB, NLB] For high availability needs, consider adopting the static stability pattern.</p> <p>Considerations</p> <p>Using more Availability Zones (AZs) in your load balancer and targets can lead to a more efficient use of capacity under normal conditions. Take this scenario: To achieve Static Stability with 2 AZs, you must provision double (200%) the required capacity. This ensures that if one AZ is impaired, you still have the full 100% capacity you need. However, if you configure 3 AZs, you only need to provision 150% of the needed capacity, ensuring that losing one AZ still leaves you with the necessary 100%.</p> <p>Note</p> <p>Overprovisioning resources will raise the operational cost of the system. AWS users should weigh these costs against their workload's availability targets before deciding on this approach.</p> <p>References and Further Information</p> <p>Static stability using Availability Zones</p> <p>AWS Fault Isolation Boundaries - Static stability</p> <p>Use static stability to prevent bimodal behavior</p> <p>AWS re:Invent 2023 - Enhance your app\u2019s security &amp; availability with Elastic Load Balancing</p>"},{"location":"reliability/workload_architecture/#use-aws-global-accelerator-for-workloads-deployed-in-multiple-regions","title":"Use AWS Global Accelerator for workloads deployed in multiple regions.","text":"<p>AWS Global Accelerator is a networking service that delivers traffic from clients via the AWS global network to your Application Load Balancer or Network Load Balancer. By using Anycast IP addresses, clients are routed to the nearest AWS edge location and traffic is delivered across the AWS backbone network; avoiding congested internet links and providing lower latency with less variation. You can configure multiple regions as destinations at the same time, ensuring that users reach your workloads with the lowest possible latency while providing high availability and resiliency. The AWS Global Accelerator continuously monitors the health of your application endpoints and automatically re-routes traffic to healthy endpoints in case of failures. This ensures high availability for your applications and reduces downtime. </p> <p>AWS Global Accelerator is beneficial if your application is deployed across AWS Regions and when you are using more than one Load Balancer for redundancy.</p> <p></p> <p>Image: AWS Global Accelerator directing traffic towards applications with redundancy. Each serviced by an Application Load Balancer, located in three separate AWS Regions.</p> <p>Best Practice</p> <p>[ALB, NLB] For multi-region deployments, consider using AWS Global Accelerator with your load balancer.</p> <p>References and Further Information</p> <p>AWS Global Accelerator</p> <p>Improving availability and performance for Application Load Balancers using one-click integration with AWS Global Accelerator</p> <p>Add an accelerator when you create a load balancer</p>"},{"location":"reliability/workload_architecture/#isolate-applications","title":"Isolate applications","text":"<p>Hosting multiple workloads in a single load balancer can amplify the blast radius of configuration and scaling issues. It can also increase complexity of compliance and change management processes. This is especially true when these workloads are managed by different teams, have different availability goals or have different risk profiles.</p> <p>Best Practice</p> <p>[ALB, NLB] Avoid using a single load balancer for multiple workloads.</p> <p>Considerations</p> <p>Keep in mind that each load balancer incurs an hourly charge, and managing several of them can also raise your overall operational costs.</p> <p>References and Further Information</p> <p>Guidance for Workload Isolation on AWS</p> <p>Organizing Your AWS Environment Using Multiple Accounts</p>"},{"location":"security/","title":"Home","text":"<p>This section provides best practices related to security and covers both Application Load Balancer (ALB) and Network Load Balancer (NLB).</p>"},{"location":"security/#how-to-use-this-guide","title":"How to use this guide","text":"<p>This guide is meant to provide generic best practices for architects, developers and engineers responsible for designing, deploying and operating a system that leverage Amazon Elastic Load Balancer (ELB) for traffic distribution.</p> <p>This guide covers two types of Elastic Load Balancing services: Application Load Balancer (ALB) and Network Load Balancer (NLB). Unless stated otherwise in a specific section, the best practice are applicable to both. We may sometimes use term 'ELB' (Elastic Load Balancing) to refer collectively to both ALB and NLB.</p> <p>Each topic presents a brief overview, followed by recommendations and best practices. Topics can be read in any order order   and it's essential to test and validate recommendations to ensure they align with your specific requirements.</p>"},{"location":"security/#security-overview","title":"Security Overview","text":"<p>Elastic Load Balancing (ELB) is built and managed with security as a top priority.</p> <p>Security is a shared responsibility between AWS and the customer. Generally speaking, AWS is responsible for the \u201cSecurity of the Cloud\u201d while the customer is responsible for the \u201cSecurity in the Cloud\u201d. To understand what this means in the context of ELB, refer to the image below:</p> <p></p> <p>A few examples can help clarify these responsibility boundaries:</p> <ul> <li>AWS is responsible for patching the load balancer software in case it becomes affected by a new Common Vulnerabilities and Exploits (CVE), while the customer is responsible for doing the same for the software running on the targets.</li> <li>The customer is responsible for configuring a TLS listener, while ELB is responsible for the TLS implementation running in the load balancer nodes.</li> </ul> <p>References and Further Reading</p> <p>Security in Elastic Load Balancing</p> <p>Shared Responsibility Model</p>"},{"location":"security/#in-this-guide","title":"In this Guide","text":"<ul> <li>Data Protection</li> <li>Incident Response</li> <li>Infrastructure Protection</li> <li>Security Assurance</li> <li>Vulnerability Management</li> </ul>"},{"location":"security/#feedback","title":"Feedback","text":"<p>This guide is being released on GitHub to collect direct feedback and suggestions from the broader AWS Cloud community. If you have a best practice that you feel we ought to include in the guide, please file an issue or submit a PR in the GitHub repository. We intend to update the guide periodically as new features are added to the service or when a new best practice evolves.</p>"},{"location":"security/data_protection/","title":"Data Protection","text":"<p>Data protection is one of the areas of the Security Pillar of the AWS Well-Architected Framework. It recommends encrypting all data in transit. This section outlines recommendations for using TLS (with NLB) or HTTPS (with ALB) to ensure data is protected while in transit.</p> <p>TLS stands for 'Transport Layer Security' and it is a sucessor of the SSL (Secure Sockets Layer). Both TLS and SSL terms are often used interchangeably, in this guide we will be using the term TLS to refer to both. HTTPS stands for 'Hypertext Transfer Protocol Secure'. It is the HTTP protocol trasmitted over a TLS session.</p>"},{"location":"security/data_protection/#tls-listeners","title":"TLS Listeners","text":"<p>Transport Layer Security (TLS) is a cryptographic protocol that secures internet communications. Implementing TLS for your application ensures that data remains confidential while in transit. By using an HTTPS or TLS listener on your load balancer, you offload the computational overhead and the security aspects of this encryption to the load balancer itself. When using HTTPS/TLS listeners, both ALB and NLB implement TLS  termination and negotiation on the front-end connection, which is from the client to the load balancer. From the load balancer to the target, you can opt for either HTTPS for end-to-end encryption or plain HTTP if you intend to offload TLS to the load balancer.</p> <p>Best Practice</p> <p>[ALB, NLB] Use HTTPS / TLS listeners</p> <p>(ALB only) If you need to provide a HTTP endpoint, the recommended approach is to create a redirection rule from HTTP to HTTPS for your plain HTTP listener. This avoids the need to enable plain HTTP on your targets.</p> <p>Best Practice</p> <p>[ALB] Use HTTP to HTTPS redirection rule.</p> <p>References and Further Reading</p> <p>Create an HTTPS listener for your Application Load Balancer</p> <p>TLS listeners for your Network Load Balancer</p> <p>AWS Config rule alb-http-to-https-redirection-check</p> <p>Application Load Balancer should be configured to redirect all HTTP requests to HTTPS</p>"},{"location":"security/data_protection/#security-policy-for-tls-listeners","title":"Security Policy for TLS Listeners","text":"<p>Security policies are configured for TLS listeners and determine which TLS protocols and ciphers are supported.</p> <p>During a TLS handshake, both clients and the load balancer provide a list of ciphers and protocols in order of preference. The first cipher on the server\u2019s list, defined by the security policy, that matches any of the client\u2019s cipher is selected for communication.</p> <p>There are several different security policies for both ALB and NLB. When using the AWS CLI to create a load balancer, the default policy is 'ELBSecurityPolicy-2016-08' which aims to maximize compatibility.</p> <p>From a security perspective, it is recommended to remove any protocols and ciphers that are not in use in order to reduce the attack surface. Especially if you have control over the clients, you could configure them to use the latest TLS protocol (version 1.3) and a strict security policy in the load balancer such as 'TLS13-1-3-2021-06'. Conversely, if you don't have control over the clients connecting to the load balancer, which is commonly the case for public websites, it is recommended that you regularly review which protocols and ciphers are being used by legitimate clients and look for opportunities to deprecate old protocols. You can leverage ALB Access Logs or NLB TLS Access Logs to find the TLS version used in each request and, for example, search if outdated protocols, like TLS 1.0, are in use.</p> <p>Best Practice</p> <p>[ALB, NLB] Use the most restrict security policy that is compatible with clients.</p> <p>References and Further Reading</p> <p>ALB Security Policies</p> <p>NLB Security Policies</p> <p>Step by step for Log Analysis with Amazon Athena</p> <p>CDK &amp; CloudFormation samples for Log Analysis with Amazon Athena</p>"},{"location":"security/data_protection/#tls-certificates","title":"TLS Certificates","text":"<p>When using HTTPs or TLS listeners in your load balancer, you are required to provide a TLS certificate. Certificates consist of a public and private key. ELB integrates with AWS Certificate Manager which simplifies the creation and management of TLS certificates. This integration ensures private key protection and facilitates auditing for certificate use.</p> <p>Best Practice</p> <p>[ALB, NLB] Use AWS Certificate Manager for TLS certificates.</p> <p>References and Further Reading</p> <p>Implement secure key and certificate management</p> <p>AWS Config Rule elbv2-acm-certificate-required</p>"},{"location":"security/data_protection/#tls-at-the-targets","title":"TLS at the targets","text":"<p>Offloading TLS from targets to the load balancer it is a good practice from performance efficiency stand point. From the security perspective, if your targets are running inside the same VPC, the communication path is in a private network.</p> <p>For cases where targets operate outside the VPC or for customers with compliance needs, end-to-end encryption might be beneficial. For that, customers can configure the Target Group with HTTPS(ALB) and TLS(NLB) protocols and set up TLS/HTTPS in the targets.</p> <p>Best Practice</p> <p>[ALB, NLB] For end-to-end encryption, use TLS/HTTPS on both the load balancer listener and target group.</p> <p>References and Further Reading</p> <p>Infrastructure security in Amazon VPC</p>"},{"location":"security/incident_response/","title":"Incident Response","text":"<p>Incident response is one of the areas of the Security Pillar of the AWS Well-Architected Framework. It emphasises the preparation required for security teams to operate effectively during an event. This section provides recommendations on logging that could be used for forensic purposes and how to engage with AWS during such events.</p>"},{"location":"security/incident_response/#access-logs","title":"Access Logs","text":"<p>Access logs offer detailed insights into the requests that reach the load balancer. These details are important during a troubleshooting or security event. Note that ALB Access Logs or NLB TLS Access Logs are not enabled by default, and enabling it will incur S3 storage costs.</p> <p>Best Practice</p> <p>[ALB, NLB] Enable access logs.</p> <p>The destination for the ALB or NLB logs is an S3 bucket. In multi-account environments, it\u2019s recommended to consolidate the logs into a centralised account. This approach allows for the application of  security controls to protect the confidentiality and integrity of the logs.</p> <p>Best Practice</p> <p>[ALB, NLB] Consolidate access logs in the Log Archive account.</p> <p>Having the logs in a centralised location not only enhances security but also simplifies integration with tools for log analysis. From these logs, you can extract valuable insights such as Top Requesters, Average Request Size, and most-used TLS Ciphers.</p> <p>Best Practice</p> <p>[ALB, NLB] Use a tool to analyze access logs.</p> <p>References and Further Reading</p> <p>Enable access logs for your Application Load Balancer</p> <p>Access logs for your Network Load Balancer</p> <p>Application and Classic Load Balancers logging should be enabled</p> <p>AWS Config Rule elb-logging-enabled</p> <p>Security OU and accounts - Log archive account</p> <p>Security OU \u2013 Log Archive account</p> <p>Querying Application Load Balancer logs</p> <p>Querying Network Load Balancer logs</p> <p>Step by step for Log Analysis with Amazon Athena</p> <p>CDK &amp; CloudFormation samples for Log Analysis with Amazon Athena</p>"},{"location":"security/incident_response/#events","title":"Events","text":"<p>ELB Service events and changes are notified via AWS Health. Customers should proactively monitor AWS Health in order to action whenever there is a communication from AWS. Also, consulting AWS Health Dashboard should be part of the playbook for incident response.</p> <p>Best Practice</p> <p>[ALB, NLB] Monitor events using AWS Health.</p> <p>References and Further Reading</p> <p>What is AWS Health?</p> <p>Use a process for event, incident, and problem management</p>"},{"location":"security/incident_response/#engage-aws-security","title":"Engage AWS Security","text":"<p>Knowing how to engage AWS Security can help during an active security event. AWS has a variety of security channels that can be used:</p> <ul> <li>AWS Security: aws-security@amazon.com</li> <li>AWS Customer Incident Response Team</li> <li>AWS Shield Response Team (SRT) / DDoS response support</li> <li>Vulnerability Reporting</li> <li>Abuse Reporting</li> <li>AWS Compliance Information</li> <li>Testing / Simulated Events Form</li> </ul> <p>Best Practice</p> <p>[ALB, NLB] Include contacting AWS in your security incident playbooks.</p> <p>References and Further Reading</p> <p>AWS Customer Incident Response Team</p> <p>Understand AWS response teams and support</p>"},{"location":"security/infrastructure_protection/","title":"Infrastructure Protection","text":"<p>Infrastructure protection is one of the areas of the Security Pillar of the AWS Well-Architected Framework. It ensures that systems and services within your workload are protected against unintended and unauthorized access, and potential vulnerabilities. This section outlines recommendations for Distributed Denial of Service (DDoS) resilience and security groups.</p>"},{"location":"security/infrastructure_protection/#distributed-denial-of-service-ddos-protection","title":"Distributed Denial of Service (DDoS) Protection","text":"<p>Every ELB is automatically protected by AWS Shield standard, which is a managed distributed denial of service (DDoS) protection service. AWS Shield Standard provides protection against the most common and frequently occurring infrastructure (layer 3 and 4) attacks, such as  SYN/UDP floods, reflection attacks, and others to support high availability of your applications on AWS.</p> <p>Additionally, Application Load Balancer (ALB) also provides additional protection at layer 7 when using HTTP/HTTPS listeners:</p> <ul> <li>They will not forward mal-formed HTTP Requests (don\u2019t meet HTTP RFC specification).</li> <li>They offer protection against certain types of HTTP slow attacks.</li> </ul> <p>Furthermore, ELB also :</p> <ul> <li>Reduce the risk of overloading your application by distributing traffic across many target instances.</li> <li>Automatically scales based on traffic received, and than can include DDoS traffic. Customers should plan for target scaling, see Plan for Scale.</li> <li>Can integrate with Shield Advance</li> <li>Can integrate with AWS WAF</li> </ul> <p>References and Further Reading</p> <p>Best practices for DDoS mitigation</p> <p>AWS Best Practices for DDoS Resiliency</p>"},{"location":"security/infrastructure_protection/#consider-using-aws-shield-advanced","title":"Consider using AWS Shield Advanced","text":"<p>By default, ALB comes with AWS Shield Standard, which provides all AWS customers with protection against common and most frequently occurring infrastructure (layer 3 and 4) attacks like SYN/UDP floods, reflection attacks, and others to endure high availability of your applications on AWS.</p> <p>Some customers are regularly targeted by DDoS attacks or may have strict compliance requirements to mitigate attacks. For customers requiring enhanced protection against more sophisticated, frequent and larger attacks, it is suggested enabling AWS Shield Advanced. </p> <p>AWS Shield Advanced offers advanced attack mitigation, 24x7 access to the Shield Response Team (SRT) and cost protection for scaling.</p> <p>Best Practice</p> <p>[ALB, NLB] For DDoS protection against sophisticated, frequent and large attacks enable AWS Shield Advanced.</p> <p>References and Further Reading</p> <p>AWS Shield Advanced</p>"},{"location":"security/infrastructure_protection/#security-group-flow-tracking-alb-only","title":"Security Group - Flow tracking (ALB only)","text":"<p>Security groups attached to the ALB use connection tracking to monitor traffic to and from the load balancer. Enhance the DDoS resilience of your load balancer by configuring it to not require EC2 connection tracking. If a security group rule allows TCP or UDP flows from all traffic (0.0.0.0/0 or ::/0) to the listening port (80, 443, etc.), and there is a matching rule in the opposite direction that permits all response traffic (0.0.0.0/0 or ::/0) for all ports (0-65535) on both TCP and UDP, then that flow of traffic is not tracked. This helps to prevent potential negative effects of this feature on the load balancer\u2019s packet throughput, enabling it to detect and scale based on the increase in traffic during a DDoS event.</p> <p>Example of a security group allowing untracked flows for connections to the port 443:</p> Ingress Rule Protocol Port Source TCP 443 0.0.0.0/0 Egress Rule Protocol Port Destination TCP 0-65535 0.0.0.0/0 <p>Best Practice</p> <p>[ALB, NLB] For enhanced DDoS resilience, allow untracked flows in the security group.</p> <p>References and Further Reading</p> <p>Best practices for DDoS mitigation - Elastic Load Balancing (BP6)</p> <p>Security group connection tracking</p> <p>Security group - Untracked connections</p>"},{"location":"security/infrastructure_protection/#know-normal-behavior-traffic-pattern-user-agents-demographics","title":"Know normal behavior (Traffic pattern, user agents, demographics)","text":"<p>In the event of a DDoS attack, distinguishing between normal and abnormal traffic is crucial. To do so, an understanding of what constitutes \u2018normal\u2019 is essential.</p> <p>To profile typical traffic, consider the following aspects:</p> <ul> <li>Traffic patterns: What are the typical fluctuations in your traffic throughout the day? For instance, a food delivery company may see a surge in traffic around lunch time and significantly less activity in the early hours of the day. </li> <li>User agents: What are the usual user agents connecingt to your load balancer? These could be common web browsers or specific applications.</li> <li>Demographics: Where are the clients accessing your load balancer typically located?</li> </ul> <p>Significant deviation from these norms could indicate a potential attack, providing valuable information for mitigation strategies. For example, you could use AWS WAF to block access from some specific countries if you identify unusual traffic from those locations.</p> <p>Best Practice</p> <p>[ALB, NLB] For DDoS protection and mitigation, know the normal behaviour of your clients.</p> <p>References and Further Reading</p> <p>Access Logs</p> <p>Monitor your Network Load Balancers</p> <p>Monitor your Application Load Balancers</p> <p>Best practices for DDoS mitigation - Metrics and alarms</p>"},{"location":"security/infrastructure_protection/#plan-for-scale","title":"Plan for Scale","text":"<p>Scaling to absorb is one of the mitigation techniques that can be used against a DDoS attack. While the ELB will automatically scale to manage the additional traffic, you will need to configure your targets for the same. Using an Auto Scaling group, you can set scaling policies based on resource usage of your EC2 instance targets, and integrate with ELB to automatically register the new instances with the load balancer. </p> <p>It\u2019s important to ensure you have enough free IP addresses in both ELB and target subnets to accommodate scaling, and that you have sufficient EC2 quota to launch the desired number of EC2 instances.</p> <p>Best Practice</p> <p>[ALB, NLB] For DDoS mitigation, scale the targets to absorb the traffic.</p> <p>References and Further Reading</p> <p>What is Amazon EC2 Auto Scaling?</p> <p>Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group</p>"},{"location":"security/infrastructure_protection/#consider-using-aws-waf-alb-only","title":"Consider using AWS WAF (ALB only)","text":"<p>ALB can be integrated with AWS WAF (Web Application Firewall) , allowing you to filter and block requests based on specific request signatures. With WAF, you can create Web Access Control Lists (ACLs) with custom rules, and also utilize AWS Managed rules. For instance, the Amazon IP Reputation List rule group includes rules based on Amazon's internal threat intelligence, allowing for further protection of your applications against potential threats.</p> <p>Best Practice</p> <p>[ALB] For DDoS protection, use AWS WAF integrated with ALB for Application layer defense.</p> <p>When using WAF, implement rate-based rules for better protection against Layer 7 HTTP flood attacks. The blog post \"The three most important AWS WAF rate-based rules\" is a great reference based on the learnings of AWS\u2019 Shield Response Team (SRT).</p> <p>Best Practice</p> <p>[ALB] For DDoS protection, use AWS WAF rate-based rules.</p> <p>References and Further Reading</p> <p>Application layer defense</p> <p>AWS Web Application Firewall</p> <p>Amazon IP Reputation List rule</p> <p>The three most important AWS WAF rate-based rules</p> <p>AWS Config Rule alb-waf-enabled</p>"},{"location":"security/infrastructure_protection/#consider-using-amazon-cloudfront-or-aws-global-accelerator","title":"Consider using Amazon CloudFront or AWS Global Accelerator","text":"<p>ELB can integrate with Amazon CloudFront or AWS Global Accelerator, which can serve as entry points for your web application.</p> <p>Both Amazon CloudFront and AWS Global Accelerator uses AWS Edge locations. These edge locations provide an additional layer of network infrastructure and can increase your ability to optimize latency and throughput to users, but also enhances your application resilience against DDoS attacks.</p> <p>Best Practice</p> <p>[ALB, NLB] For DDoS protection, leverage AWS Edge locations by integrating either CloudFront or Global Accelerator to your load balancer.</p> <p>References and Further Reading</p> <p>Amazon CloudFront</p> <p>AWS Global Accelerator</p> <p>AWS Global Edge locations</p> <p>Use AWS Edge locations for scale</p>"},{"location":"security/infrastructure_protection/#when-using-cloudfront-restrict-the-direct-access-to-the-load-balancer","title":"When using CloudFront, restrict the direct access to the load balancer","text":"<p>Prevent users from bypassing Amazon CloudFront and accessing your load balancer directly. You can configure Amazon CloudFront and your Application Load Balancer to prevent users from directly accessing the load balancer by configuring CloudFront to add a custom HTTP header to the requests that it sends to your origin. In the ALB you then configure a rule to validate the existance of the header.</p> <p>This allows users to access the Application Load Balancer only through CloudFront, ensuring that you get the benefits of using CloudFront.</p> <p>Best Practice</p> <p>[ALB] When using CloudFront, restrict users from directly accessing the Application Load Balancer.</p> <p>Additionally, you should lock down the security group associated with the load balancer used as the origin, ensuring it accepts connections only from CloudFront.</p> <p>Best Practice</p> <p>[ALB, NLB] When using CloudFront, lock down the load balancer security group to accept connections only from CloudFront.</p> <p>References and Further Reading</p> <p>Restricting access to Application Load Balancers</p> <p>Limit access to your origins using the AWS-managed prefix list for Amazon CloudFront</p>"},{"location":"security/infrastructure_protection/#target-security-groups","title":"Target Security Groups","text":"<p>To ensure your targets receive traffic exclusively from the load balancer, restrict the security group(s) associated with your targets to accept traffic solely from the load balancer. This can be achieved by setting the load balancer's security group as the source in the ingress rule of the target's security group.</p> <p>Best Practice</p> <p>[ALB, NLB] Lock down the target security groups to receive traffic only from the load balancer.</p>"},{"location":"security/security_assurance/","title":"Security Assurance","text":""},{"location":"security/security_assurance/#automated-security-and-compliance-checks","title":"Automated security and compliance checks","text":"<p>Cloud environments are dynamic by nature. Having automated security checks is important to make sure the existing and new load balancers will adhere to the controls defined by your organisation.</p> <p>Both AWS Trusted Advisor and AWS Security Hub offers security and best practices checks specific for ELBs.</p> <p>For example, you can enable AWS Security Hub to validate whether your ALBs have proper dsync mitigation mode with the rule \"Application Load Balancer should be configured with defensive or strictest desync mitigation mode\"</p> <p>Best Practice</p> <p>[ALB, NLB] Use automated security and compliance checks.</p> <p>References and Further Reading</p> <p>AWS Trusted Advisor</p> <p>AWS Security Hub</p> <p>AWS Security Hub - ELB Controls</p>"},{"location":"security/vulnerability_management/","title":"Vulnerability Management","text":""},{"location":"security/vulnerability_management/#desync-mitigation-alb-only","title":"Desync mitigation (ALB only)","text":"<p>HTTP desync attack, or HTTP request smuggling attacks, aim to exploit different interpretation of RFC non-compliant HTTP requests across a chain of proxies, opening up the possibility of smuggling a request to the back-end.</p> <p>Application Load Balancer (ALB) supports HTTP Desync Mitigation Mode that classify every request based on its threat level using an AWS Open Source library called HTTP Desync Guardian.</p> <p>Customers can choose among three modes - \u201cDefensive\u201d, \u201cStrictest\u201d, and \u201cMonitor\u201d. The \u201cStrictest\u201d mode ensure that your application only sees requests that are RFC 7230 compliant.</p> <p>The \u201cStrictest\u201d mode is recommended from the security perspective. However, to avoid false positives, users may want to keep it in the \u201cMonitor\u201d mode for some time, and monitor the DesyncMitigationMode_NonCompliant_Request_Count CloudWatch metric. Also, the \u201cclassification\u201d and \"classification_reason\" fields in the Access Logs should be evaluated to determine the impact of enabling \u201cStrictest\u201d mode.</p> <p>Best Practice</p> <p>[ALB] Use Strictest mode for desync mitigation.</p> <p>Note</p> <p>The feature drop_invalid_header_fields was initially intended to provide mitigation for HTTP desync attacks, and was deprecated for this purpose by the HTTP desync mitigation mode feature.</p> <p>References and Further Reading</p> <p>ALB Documentation - Desync mitigation mode</p> <p>Application and Classic Load Balancers are adding defense in depth with the introduction of Desync Mitigation Mode</p> <p>AWS Config Rule alb-desync-mode-check</p> <p>HTTP Desync Guardian</p> <p>Application Load Balancer should be configured with defensive or strictest desync mitigation mode</p>"}]}